# -*- coding: utf-8 -*-
"""Task 3.ipynb

Automatically generated by Colab.

Original file is located at
"""

import pandas as pd
import pickle
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

class HotelBookingModel:
    def __init__(self):
        self.model = RandomForestClassifier(random_state=42)
        self.feature_encoders = {}
        self.target_encoder = LabelEncoder()

    def _preprocess_features(self, X: pd.DataFrame) -> pd.DataFrame:
        categorical_cols = ["type_of_meal_plan", "room_type_reserved", "market_segment_type"]
        X_processed = X.copy()
        for col in categorical_cols:
            if col not in self.feature_encoders:
                le = LabelEncoder()
                X_processed[col] = le.fit_transform(X_processed[col])
                self.feature_encoders[col] = le
            else:
                X_processed[col] = self.feature_encoders[col].transform(X_processed[col])
        return X_processed

    @classmethod
    def load(cls, path: str) -> "HotelBookingModel":
        with open(path, "rb") as f:
            data = pickle.load(f)
        loaded_model = cls()
        loaded_model.model = data["model"]
        loaded_model.feature_encoders = data["feature_encoders"]
        loaded_model.target_encoder = data["target_encoder"]
        return loaded_model

if __name__ == "__main__":
    loaded_model = HotelBookingModel.load("hotel_booking_model.pkl")

    test_case_1 = {
        "no_of_adults": 2,
        "no_of_children": 0,
        "no_of_weekend_nights": 1,
        "no_of_week_nights": 2,
        "type_of_meal_plan": "Meal Plan 1",
        "required_car_parking_space": 0,
        "room_type_reserved": "Room_Type 1",
        "lead_time": 45,
        "arrival_month": 5,
        "market_segment_type": "Online",
        "repeated_guest": 0,
        "no_of_previous_cancellations": 0,
        "no_of_previous_bookings_not_canceled": 0,
        "avg_price_per_room": 120.0,
        "no_of_special_requests": 1}

    test_case_2 = {
        "no_of_adults": 1,
        "no_of_children": 0,
        "no_of_weekend_nights": 2,
        "no_of_week_nights": 1,
        "type_of_meal_plan": "Meal Plan 3",
        "required_car_parking_space": 0,
        "room_type_reserved": "Room_Type 1",
        "lead_time": 1,
        "arrival_month": 2,
        "market_segment_type": "Offline",
        "repeated_guest": 1,
        "no_of_previous_cancellations": 0,
        "no_of_previous_bookings_not_canceled": 2,
        "avg_price_per_room": 104.0,
        "no_of_special_requests": 0}

    test_df = pd.DataFrame([test_case_1, test_case_2])
    predictions = loaded_model.model.predict(loaded_model._preprocess_features(test_df))
    predicted_labels = loaded_model.target_encoder.inverse_transform(predictions)

    print("Test Case 1 Prediction:", predicted_labels[0])
    print("Test Case 2 Prediction:", predicted_labels[1])